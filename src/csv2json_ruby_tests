#!/usr/bin/env ruby

require_relative 'csv2json_ruby_lib'
require 'test/unit'


def remap_grp_to_renamed_group(n)
    if n == "grp"
        return "renamed_group"
    else
        return n
    end
end

class Tests < Test::Unit::TestCase
    def test_hash_raise()
        input_hash = {
            "grp_1_a" => 1,
            "grp_1_b" => 2,
            "grp_1_c" => 3,

            "grp_2_a" => 4,
            "grp_2_b" => 5,
            "grp_2_c" => 6,

            "grp_3_a" => 7,
            "grp_3_b" => 8,
            "grp_3_c" => 9
        }

        expected_output = {
            "grp" => {
                "1" => {
                    "a" => 1,
                    "b" => 2,
                    "c" => 3
                },
                "2" =>  {
                    "a" => 4,
                    "b" => 5,
                    "c" => 6
                },
                "3" => {
                    "a" => 7,
                    "b" => 8,
                    "c" => 9
                },
            }
        }

        key_to_hash_pattern = /^(grp)_([0-9])_([a-c]+)$/
        output = raise_keys_to_hashes(input_hash, key_to_hash_pattern)

        assert_equal(output, expected_output)
    end

    def test_hash_raise_with_group_mapping()
        input_hash = {
            "grp_1_a" => 1,
            "grp_1_b" => 2,
            "grp_1_c" => 3,

            "grp_2_a" => 4,
            "grp_2_b" => 5,
            "grp_2_c" => 6,

            "grp_3_a" => 7,
            "grp_3_b" => 8,
            "grp_3_c" => 9
        }

        expected_output = {
            "renamed_group" => {
                "1" => {
                    "a" => 1,
                    "b" => 2,
                    "c" => 3
                },
                "2" =>  {
                    "a" => 4,
                    "b" => 5,
                    "c" => 6
                },
                "3" => {
                    "a" => 7,
                    "b" => 8,
                    "c" => 9
                },
            }
        }

        key_to_hash_pattern = /^(grp)_([0-9])_([a-c]+)$/
        output = raise_keys_to_hashes(input_hash, key_to_hash_pattern, group_name_remapper=lambda { |x| remap_grp_to_renamed_group(x) })

        assert_equal(output, expected_output)
    end

    def test_modifier_name_is_nil_when_nil()
        mod = {
            "1" => {
                "name" => "nil",
                "price" => "1",
            }
        }

        mod.each { |k,v|
            res = modifier_name_is_nil(k, v)
            assert_equal(res, true)
        }
    end

    def test_modifier_name_is_nil_when_not_nil()
        mod = {
            "1" => {
                "name" => "x",
                "price" => "1",
            }
        }

        mod.each { |k,v|
            res = modifier_name_is_nil(k, v)
            assert_equal(res, false)
        }
    end

    def test_stockitem_mapper()
        input_row = {
            "item id" => "111010",
            "description" => "Coffee",
            "price" => "$1.25",
            "cost" => "-0.80",
            "price_type" => "system",
            "quantity_on_hand" => "100000",
            "modifiers" => {
                "1" => {
                  "name" => "Small",
                  "price" => "-0.25"
                },
                "2" => {
                  "name" => "Medium",
                  "price" => "0"
                },
                "3" => {
                  "name" => "Large",
                  "price" => "0.3"
                }
            }
        }
        expected_output = {
            "item id" => 111010,
            "description" => "Coffee",
            "price" => 1.25,
            "cost" => -0.8,
            "price_type" => "system",
            "quantity_on_hand" => 100000,
            "modifiers" => [
                {
                  "name" => "Small",
                  "price" => "-0.25"
                },
                {
                  "name" => "Medium",
                  "price" => "0"
                },
                {
                  "name" => "Large",
                  "price" => "0.3"
                }
            ]
        }
        output = stockitem_mapper(input_row)
        assert_equal(output, expected_output)
    end

    def test_collapsed_indexed_hashes_to_list()
        inp_hash = {
            "1" => { "a" => "z", "b" => "y" },
            "2" => { "a" => "x", "b" => "w" }
        }

        expected_output = [
            { "a" => "z", "b" => "y" },
            { "a" => "x", "b" => "w" }
        ]
    end
end

